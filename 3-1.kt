fun main() {
    // запрашиваем количество строк
    println("Сколько строк будет в массиве?")  // выводим  на экран
    val rowsInput = readLine()                 // читаем ввод

    // проверяем если readLine дал null то выдаем ошибку
    if (rowsInput == null) {
        println("Ошибка: не удалось прочитать ввод. Попробуйте запустить программу в консоли.")
        return
    }

    // пробуем преобразовать строку в  число  для  проверки
    val rows = rowsInput.toIntOrNull()

    // проверяем если rows = null (ввели не число) ИЛИ rows < 0 (ввели 0 или отрицательное)
    if (rows == null || rows <= 0) {
        println("Ошибка: количество строк должно быть положительным целым числом.")
        return
    }

    // запрашиваем количество столбцов
    println("Сколько столбцов будет в массиве?")
    val colsInput = readLine()  //читаем ввод

    if (colsInput == null) {
        println("Ошибка: не удалось прочитать ввод.")
        return
    }

    val cols = colsInput.toIntOrNull()

    if (cols == null || cols <= 0) {
        println("Ошибка: количество столбцов должно быть положительным целым числом.")
        return // те же проверки что и для rows
    }

    // создаём двумерный массив
    // Array(rows) создаём массив из rows
    // { IntArray(cols) } каждый элемент это массив целых чисел длиной 'cols'
    val matrix = Array(rows) { IntArray(cols) }


    println("Теперь введите $rows x $cols трёхзначных чисел (от 100 до 999)")

    //2 вложенных цикла i номер строки j номер столбца
    for (i in 0 until rows) {      // until означает от 0 до rows не включая rows
        for (j in 0 until cols) {  // то же самое для столбцов

            // бесконечный цикл будем спрашивать число  пока не введут правильное
            while (true) {
                //выводим в какую ячейку вводим
                print("Введите число для ячейки [$i][$j]: ")
                val input = readLine()  // Читаем ввод

                //Если ввод не удался
                if (input == null) {
                    println("Не удалось прочитать ввод. Попробуйте снова.")
                    continue  // цикл заново начинает работать
                }

                //пробуем преобразовать строку в число если не число то будет ошибка
                val parsedNumber = input.toIntOrNull()

                // если null значит ввели не число
                if (parsedNumber == null) {
                    println("Это не число. Попробуйте снова.")
                }
                //если число не в диапазоне от 100 до 999
                else if (parsedNumber !in 100..999) {
                    println("Число должно быть от 100 до 999. Попробуйте снова.")
                }
                // если всё нормик попадаем сюда
                else {
                    //записываем число в ячейку массива
                    matrix[i][j] = parsedNumber
                    //выходим из while переходим к следующей ячейке
                    break
                }
            }
        }
    }

    //Собираем все уникальные цифры из всех чисел
    // mutableSetOf<Char>() это функция в который нельзя положить одинаковые элементы дважды. чар чтобы были  символы а не числа
    val uniqueDigits = mutableSetOf<Char>()

    //проходим по всем строкам
    for (i in 0 until rows) {
        //проходим по всем столбцам в текущей строке
        for (j in 0 until cols) {
            //берём число из ячейки и превращаем его в строку
            val numberAsString = matrix[i][j].toString()
            //проходим по каждой цифре в этой строке
            for (digitChar in numberAsString) {
                //добавляем цифру в mutableSetOf<Char>()  если такая уже есть она не добавится
                uniqueDigits.add(digitChar)
            }
        }
    }

    //выводим массив на экран красиво
    println("\nВаш массив:")  //\n  переход на новую строку

    for (i in 0 until rows) {
        for (j in 0 until cols) {
            // ${matrix[i][j]} подставляет значение числа
            print("${matrix[i][j]} ")
        }
        // После каждой строки массива переходим на новую строку
        println()
    }

    //выводим результат сколько уникальных цифр нашли
    // ${uniqueDigits.size} — подставляет количество элементов в mutableSetOf<Char>()
    println("\nВ этом массиве использовано ${uniqueDigits.size} разных цифр.")
}